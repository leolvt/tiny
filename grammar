<programa> ::= <cmd_global> <lista_procedimentos> "endp"

# <lista_procedimentos> ::= <lista_procedimentos> <procedimento>
# <lista_procedimentos> ::= <procedimento>

# <procedimento> ::=  "proc" <nome> "(" <lista_variaveis> ")" 
					<cmd_local>
					<lista_comandos> 
					"endproc"

# <cmd_local> ::= "local" <lista_variaveis> ";"
# <cmd_local> ::= # Nada

#<cmd_global> ::= "global" <lista_variaveis> ";"
#<cmd_global> ::= # Nada

#<lista_variaveis> ::= <lista_variaveis> "," <variavel>
#<lista_variaveis> ::= <variavel>

# <lista_comandos> ::= <comando> ";"
# <lista_comandos> ::= <comando> ";" <lista_comandos>

#<commando> ::= "call" <nome> "(" <lista_param_reais> ")"
#<comando> ::= "writeStr" "(" <string> ")"
#<comando> ::= "writeVar" "(" <variavel> ")"
#<comando> ::= "writeln"
#<comando> ::= "read" "(" <variavel> ")"
#<comando> ::= <variavel> ":=" <exp_aritmetica>
#<comando> ::= "for" <variavel> ":=" <exp_aritmetica> "to" <exp_aritmetica> "do"
#				  <lista_comandos>
#			  "end"	
#<comando> ::= "for" <variavel> ":=" <exp_aritmetica> "downto" <exp_aritmetica> "do"
#				  <lista_comandos>
#			  "end"	
#<comando> ::= "for" <variavel> ":=" <exp_aritmetica> "to" <exp_aritmetica> "do"
#				  <lista_comandos>
#			  "endfor"	
#<comando> ::= "for" <variavel> ":=" <exp_aritmetica> "downto" <exp_aritmetica> "do"
#				  <lista_comandos>
#			  "endfor"
#<comando> ::= "while" <exp_booleana> "do"
#			      <lista_comandos>
#			  "end"
#<comando> ::= "while" <exp_booleana> "do"
#			      <lista_comandos>
#			  "endw"
#<comando> ::= "if" <exp_booleana> "then" <lista_comandos> "end"
#<comando> ::= "if" <exp_booleana> "then" <lista_comandos> "else"
#			      <lista_comandos> "end"
#<comando> ::= "if" <exp_booleana> "then" <lista_comandos> "endif"
#<comando> ::= "if" <exp_booleana> "then" <lista_comandos> "else"
#			      <lista_comandos> "endif"

#<lista_param_reais> ::= <lista_param_reais> "," <exp_aritmetica> 
#<lista_param_reais> ::= <exp_aritmetica>

# <exp_booleana> ::= <exp_or>

# <exp_or> ::= <exp_or> or <exp_and>
# <exp_or> ::= <exp_and>

# <exp_and> ::=  <exp_and> and <exp_not>
# <exp_and> ::=  <exp_not>

# <exp_not> ::= not <exp_rel>
# <exp_not> ::= <exp_rel>

# <exp_rel> ::= <exp_aritmetica> "<" <exp_aritmetica>
# <exp_rel> ::= <exp_aritmetica> ">" <exp_aritmetica>
# <exp_rel> ::= <exp_aritmetica> "<=" <exp_aritmetica>
# <exp_rel> ::= <exp_aritmetica> "<=" <exp_aritmetica>
# <exp_rel> ::= <exp_aritmetica> "<>" <exp_aritmetica>
# <exp_rel> ::= <exp_aritmetica> "=" <exp_aritmetica>
# <exp_rel> ::= "(" <exp_booleana> ")"
# <exp_rel> ::= <valor_booleano>

# <valor_booleano> ::= "true" | "false"

# <exp_aritmetica> ::= <exp_aritmetica> "+" <exp_mul>
# <exp_aritmetica> ::= <exp_aritmetica> "-" <exp_mul> 
# <exp_aritmetica> ::= <exp_mul>

# <exp_mul> ::= <exp_mul> "*" <fator>
# <exp_mul> ::= <exp_mul> "/" <fator>
# <exp_mul> ::= <fator>

# <fator> ::= "(" <exp_aritmetica> ")"
# <fator> ::= "-" "(" <exp_aritmetica> ")"
# <fator> ::= "sqrt" "(" <exp_aritmetica> ")"
# <fator> ::= "-" "sqrt" "(" <exp_aritmetica> ")"
# <fator> ::= <num>
# <fator> ::= <variavel>
# <fator> ::= -<variavel>

# <num> ::= ([0-9]+"."[0-9]*)|("."[0-9]+)
# <variavel> ::= [a-zA-z]

# <nome> ::= <string>

# <string> ::= ".*"

================================================================================

Precedencia Operadores:

0) ( ... )  sqrt
1) *  /   (Assoc. Esq)
2) +  -   (Assoc. Esq)
3) >  <  >=  <=  <> =
4) and    (Assoc. Esq)
5) or     (Assoc. Esq)
6) not

================================================================================
